//============================================================== Mehode :- 1 ======================================================================================

class Solution {
public:
    bool isAnagram(string s, string t)
     {
          if(s.length() != t.length())
          {
            return false;
         }
            sort(s.begin(), s.end());
             sort(t.begin(), t.end());
            if(s == t)
                return true;  
        return false;
    }
};

Time Complexity : O(NlogN + MlogM), Sorting the String(s and t) costs O(NlogN + MlogM). Where N is the size
    of the String(s) and M is the size of the String(t).

    Space Complexity : O(1), Constant Space.

    Solved using String + Sorting.



//============================================================== Mehode :- 2  ======================================================================================

class Solution {
public:
    bool isAnagram(string s, string t)
     {
        int freqTable[256] = {0};

        for(int i = 0 ;i <s.size() ; i++ )
        {
            freqTable[s[i]]++;
        }//Time-COmplexity : O(n)

         for(int i = 0 ;i <t.size() ; i++ )
        {
            freqTable[t[i]]--;
        } // Time Complexity : O(m)

        for(int i = 0 ; i <256 ; i++)
        {
            if(freqTable[i] != 0)
                return false;
        }//Time-Complexity : O(256)
        return true;
    }
    // Total Time-Complexity : O(n+m)
};
