// ===================================================================== Using Set ===========================================================================================
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
    set<int> s; 
        for(int i =0; i<nums.size(); i++)
        {
            s.insert(nums[i]);
        }
        
        int ans = s.size();
        nums.clear();
        for(auto i:s)
        {
           //int k = *i;
           nums.push_back(i);
        }
        return ans;
    }
};



// Time Complexity : O(N)
// Space Complexity : O(N)

// ===================================================================== Two Pointer Approach ============================================================================

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int ans = 1;
        for(int i = 1; i < size(nums); ++i)
            if(nums[i] != nums[i - 1])  {  
                nums[ans] = nums[i]; 
                ++ans; 
            }
        return ans;
    }
};


class Solution{
public:
    int remove_duplicate(int a[],int n){
   int i=0;
        for(int j=1;j<n ; j++){
            if(a[i]!=a[j]){
                i++;
                a[i]=a[j];
            }
        }
        return i+1;

     
    }
};

TC: O(n)
SC: O(1)
